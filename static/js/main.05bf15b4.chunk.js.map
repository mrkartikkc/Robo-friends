{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Search.js","Robots.js","Components/Scroll.js","Components/Errorboundaries.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","Robots","map","user","i","key","Search","Searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflow","height","children","Errorboundaries","state","hasError","error","info","this","setstate","Component","App","onsearchchange","event","setState","target","value","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oNAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACO,yBAAKC,UAAU,gDACd,yBAAKC,IAAK,SACVC,IAAG,+BAA2BH,EAA3B,cACH,6BACI,4BAAKF,GACL,2BAAIC,MCaLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCE1BW,EAbA,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC1B,OACI,yBAAKX,UAAU,OACX,2BACAA,UAAU,sCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTTP,EAAS,CAClB,CACIL,GAAI,EACJF,KAAM,SACNkB,SAAU,WACVjB,MAAO,2BAEX,CACIC,GAAI,EACJF,KAAM,MACNkB,SAAU,OACVjB,MAAO,iBAEX,CACIC,GAAI,EACJF,KAAM,MACNkB,SAAU,OACVjB,MAAO,wBAEX,CACIC,GAAI,EACJF,KAAM,QACNkB,SAAU,UACVjB,MAAO,8BAEX,CACIC,GAAI,EACJF,KAAM,OACNkB,SAAU,YACVjB,MAAO,wBAEX,CACIC,GAAI,EACJF,KAAM,OACNkB,SAAU,UACVjB,MAAO,kBAEX,CACIC,GAAI,EACJF,KAAM,SACNkB,SAAU,WACVjB,MAAO,uBAEX,CACIC,GAAI,EACJF,KAAM,UACNkB,SAAU,OACVjB,MAAO,oBCnCAkB,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAASC,OAAQ,UACnCH,EAAMI,WCiBJC,E,kDAnBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,qDAEJG,KAAKV,MAAMI,a,GAhBIQ,aCuCfC,G,wDAhCb,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEvB,YAAasB,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACXnB,OAAQA,EACRM,YAAa,IAJH,E,qDAYJ,IAAD,OACD0B,EAAiBT,KAAKJ,MAAMnB,OAAOiC,QAAO,SAACjC,GAC/C,OAAOA,EAAOP,KACXyC,cACAC,SAAS,EAAKhB,MAAMb,YAAY4B,kBAErC,OACE,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAQW,aAAcgB,KAAKI,iBAC3B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQgC,W,GAzBZP,cCIEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.05bf15b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n           <div className='tc bg-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt ='photos' \r\n            src={`https://robohash.org/${ id }?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({Robots}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                Robots.map((user , i) => {\r\n                    return (\r\n                        <Card \r\n                        key={i} \r\n                        id={Robots[i].id}\r\n                        name={Robots[i].name} \r\n                        email={Robots[i].email} \r\n                        />\r\n                    );  \r\n                })\r\n            }\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Search = ({Searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='tc pa3 ba b--green bg-lightest-blue'\r\n            type='Search' \r\n            placeholder='Search robots'\r\n            onChange={searchChange}    \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","export const Robots = [\r\n    {\r\n        id: 1,\r\n        name: 'kartik',\r\n        username: 'kartikkc',\r\n        email: 'kartikchauhan@gmail.com',    \r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'jim',\r\n        username: 'jimh',\r\n        email: 'jim@gmail.com',    \r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'pam',\r\n        username: 'pamb',\r\n        email: 'pambeasely@gmail.com',    \r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'tobby',\r\n        username: 'tobbyfl',\r\n        email: 'tobbyflendersont@gmail.com',    \r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'erin',\r\n        username: 'erinkelly',\r\n        email: 'errinkelly@gmail.com',    \r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'ryan',\r\n        username: 'ryanceo',\r\n        email: 'ryan@gmail.com',    \r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'dwight',\r\n        username: 'dwightsh',\r\n        email: 'beetfarms@gmail.com',    \r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'michael',\r\n        username: 'mike',\r\n        email: 'scott@gmail.com',    \r\n    },\r\n]","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll',height: '570px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass Errorboundaries extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setstate({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops, that's not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default Errorboundaries","import React, { Component } from \"react\";\r\nimport Cardlist from \"../Components/Cardlist\";\r\nimport Search from \"../Components/Search\";\r\nimport { Robots } from \"../Robots\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport Errorboundaries from \"../Components/Errorboundaries\"\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      Robots: Robots,\r\n      Searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  onsearchchange = (event) => {\r\n    this.setState({ Searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.Robots.filter((Robots) => {\r\n      return Robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.Searchfield.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robofriends</h1>\r\n        <Search searchChange={this.onsearchchange} />\r\n        <Scroll>\r\n          <Errorboundaries>\r\n            <Cardlist Robots={filteredRobots} />\r\n          </Errorboundaries>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}